/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smartEtl.frames;

import java.awt.Button;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.util.ArrayList;

import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;

import smartEtl.config.Configuration;
import smartEtl.config.PropertiesName;
import smartEtl.core.utils;

/**
 *
 * @author nouman
 */
public class TablesList extends javax.swing.JInternalFrame {

    /**
     * Creates new form TablesList
     */
    public TablesList() {
    	super("Tables", true,true, true, true);
    	String srcDataBase = Configuration.getAttribute(PropertiesName.srcDB);
    	this.setTitle(srcDataBase+"-db");
    	Object  obj[][] = LoadData(srcDataBase);
        initComponents(obj);
    }
    
    private Object[][] LoadData(String srcDataBase){
    	
    	Connection conn = utils.getSourceConnection();
    	ArrayList<String> tables = utils.getTables(conn, srcDataBase);
    	Object  obj[][] = new Object[tables.size()][2];
    	for( int i = 0 ; i < tables.size() ; i++){
    		obj[i][0] = tables.get(i);
    	}
    	return obj;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents(Object  obj[][] ) {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablesList = new javax.swing.JTable();

        tablesList.setModel(new javax.swing.table.DefaultTableModel(
            obj,
            new String [] {
                "Tables"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablesList.setColumnSelectionAllowed(true);
        tablesList.getTableHeader().setReorderingAllowed(false);
        tablesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablesListMouseReleased(evt);
            }
        });
        
        jScrollPane1.setViewportView(tablesList);
        tablesList.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablesListMouseReleased(java.awt.event.MouseEvent e) {//GEN-FIRST:event_tablesListMouseReleased
    	int r = tablesList.rowAtPoint(e.getPoint());
        if (r >= 0 && r < tablesList.getRowCount()) {
        	tablesList.setRowSelectionInterval(r, r);
        } else {
        	tablesList.clearSelection();
        }

        int rowindex = tablesList.getSelectedRow();
        int colindex = tablesList.getSelectedColumn();
        if (!(rowindex > -1 && colindex > -1))
            return;
        String val = (String) tablesList.getValueAt(rowindex, colindex);
        if (e.getComponent() instanceof JTable ) {
            JPopupMenu popup = showPopUp(val);
            popup.show(e.getComponent(), e.getX(), e.getY());
        }
    }//GEN-LAST:event_tablesListMouseReleased

    public JPopupMenu showPopUp(final String table){
    	JPopupMenu popup = new JPopupMenu();
    	JMenuItem item = new JMenuItem("View Data");
    	item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	getTableData(table);
            }
        });
    	popup.add(item);
    	return popup;
    }
    
    public void getTableData(String table){
    	sourceDataJtable tables = new sourceDataJtable();
    	tables.setSchema(Configuration.getAttribute(PropertiesName.srcDB));
    	tables.setTable(table);
    	tables.populateData();
    	tables.setTitle(table);
    	tables.setLocation(100, 100);
    	tables.setVisible(true);
    	getParent().add(tables);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablesList;
    // End of variables declaration//GEN-END:variables
}
