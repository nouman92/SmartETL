/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smartEtl.Screens;

import javax.swing.JOptionPane;

import smartEtl.operations.ConfigurationService;
import smartEtl.operations.DataBaseModule;
import smartEtl.operations.PropertiesName;

/**
 *
 * @author furqan
 */
public class ConnectionTest extends javax.swing.JInternalFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
     * Creates new form destConnection
     */
    public ConnectionTest(String dataFor) {
        super("Connection", true,true, true, true);
        this.DataFor = dataFor;
        if(this.DataFor.equals("src"))
           this.setTitle("Source Connection");
        else
           this.setTitle("Destination Connection");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DB = new javax.swing.JComboBox<>();
        DBlable = new javax.swing.JLabel();
        DBUrl = new javax.swing.JTextField();
        DBUrlLable = new javax.swing.JLabel();
        DBPort = new javax.swing.JTextField();
        DBPortLable = new javax.swing.JLabel();
        DBUserName = new javax.swing.JTextField();
        DBUserNameLable = new javax.swing.JLabel();
        DBPassword = new javax.swing.JTextField();
        DBPasswordLable = new javax.swing.JLabel();
        DBSaveButton = new javax.swing.JButton();
        DBTestButton = new javax.swing.JButton();
        DBSchema = new javax.swing.JTextField();
        DBSchemaLable = new javax.swing.JLabel();

        DB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MySQl Server", "SQL Server", "Postgre Server", "Oracle" }));

        DBlable.setText("Select DB");

        DBUrl.setBackground(new java.awt.Color(254, 254, 254));

        DBUrlLable.setText("DB URL");

        DBPort.setBackground(new java.awt.Color(254, 254, 254));

        DBPortLable.setText("Port");

        DBUserName.setBackground(new java.awt.Color(254, 254, 254));

        DBUserNameLable.setText("User Name");

        DBPassword.setBackground(new java.awt.Color(254, 254, 254));
        DBPasswordLable.setText("Password");

        DBSaveButton.setText("Save");
        DBSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DBSaveButtonActionPerformed(evt);
            }
        });

        DBTestButton.setText("Test");
        DBTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DBTestButtonActionPerformed(evt);
            }
        });

        DBSchemaLable.setText("DataBase");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(DBUrlLable, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(DBSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(DBTestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(DBUserName)
                            .addComponent(DBUrl)
                            .addComponent(DB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DBSchema)
                            .addComponent(DBPort, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DBPassword, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(DBlable, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DBPortLable, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DBUserNameLable)
                                    .addComponent(DBSchemaLable)
                                    .addComponent(DBPasswordLable, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DBlable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DBUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DBUrlLable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DBPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DBPortLable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DBSchema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DBSchemaLable))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DBUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DBUserNameLable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DBPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DBPasswordLable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DBSaveButton)
                    .addComponent(DBTestButton))
                .addGap(34, 34, 34))
        );
        loadFields();
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DBTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DBTestButtonActionPerformed
    	int index = DB.getSelectedIndex();
    	String url  = DBUrl.getText();
    	String port = DBPort.getText();
    	String database = DBSchema.getText();
    	String user = DBUserName.getText();
    	String pass = DBPassword.getText();
    	
    	if(index < 0 || url.equals("") || port.equals("") || database.equals("") || user.equals("") || pass.equals(""))
    	{
    		JOptionPane.showMessageDialog(this, "Enter All Fields!");
    		return;
    	}
    	try{
    		Integer.parseInt(port);
    	}catch(Exception ex){
    		JOptionPane.showMessageDialog(this, "Invalid Port Value!");
    		return;
    	}
    	boolean status = this.testDB(index, url, port,database, user, pass); 
    	if( status )
        JOptionPane.showMessageDialog(this, "DB Ping Sucessfully");
        else
        JOptionPane.showMessageDialog(this, "Error in Connection");
    }//GEN-LAST:event_DBTestButtonActionPerformed

    private boolean testDB(int index,String url,String port,String database, String user,String pass){
    	boolean status = DataBaseModule.testConnection(index,url,port,database,user,pass);
    	return status;
    }
    private void DBSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DBSaveButtonActionPerformed
    	int index = DB.getSelectedIndex();
    	String driverClass = DataBaseModule.getDriverClass(index);
    	String url  = DBUrl.getText();
    	String port = DBPort.getText();
    	String database = DBSchema.getText();
    	String user = DBUserName.getText();
    	String pass = DBPassword.getText();
    	if(index < 0 || url.equals("") || port.equals("") || database.equals("") || user.equals("") || pass.equals(""))
    	{
    		JOptionPane.showMessageDialog(this, "Enter All Fields!");
    		return;
    	}
    	try{
    		Integer.parseInt(port);
    	}catch(Exception ex){
    		JOptionPane.showMessageDialog(this, "Invalid Port Value!");
    		return;
    	}
    	boolean status = this.testDB(index, url ,port,database, user, pass);
        if( status ){
        	ConfigurationService.addAttribute(PropertiesName.getProperty(this.DataFor+"Driver"), driverClass);
        	ConfigurationService.addAttribute(PropertiesName.getProperty(this.DataFor+"Url"), url);
        	ConfigurationService.addAttribute(PropertiesName.getProperty(this.DataFor+"Port"), port);
        	ConfigurationService.addAttribute(PropertiesName.getProperty(this.DataFor+"User"), user);
        	ConfigurationService.addAttribute(PropertiesName.getProperty(this.DataFor+"DB"), database);
        	ConfigurationService.addAttribute(PropertiesName.getProperty(this.DataFor+"Password"), pass);
        	ConfigurationService.saveConfig();
            JOptionPane.showMessageDialog(this, "Data Saved");
        }
        else
            JOptionPane.showMessageDialog(this, "Error in Connection- fix Params");
    }//GEN-LAST:event_DBSaveButtonActionPerformed
    
    private void loadFields(){
    	int index = DataBaseModule.getDriverClassIndex(ConfigurationService.getAttribute(PropertiesName.getProperty(this.DataFor+"Driver")));
    	String url  = ConfigurationService.getAttribute(PropertiesName.getProperty(this.DataFor+"Url"));
    	String port = ConfigurationService.getAttribute(PropertiesName.getProperty(this.DataFor+"Port"));
    	String database = ConfigurationService.getAttribute(PropertiesName.getProperty(this.DataFor+"DB"));
    	String user = ConfigurationService.getAttribute(PropertiesName.getProperty(this.DataFor+"User"));
    	String pass = ConfigurationService.getAttribute(PropertiesName.getProperty(this.DataFor+"Password"));
    	DB.setSelectedIndex(index);
    	DBUrl.setText(url);
    	DBPort.setText(port);
    	DBSchema.setText(database);
    	DBUserName.setText(user);
    	DBPassword.setText(pass);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> DB;
    private javax.swing.JTextField DBPassword;
    private javax.swing.JLabel DBPasswordLable;
    private javax.swing.JTextField DBPort;
    private javax.swing.JLabel DBPortLable;
    private javax.swing.JButton DBSaveButton;
    private javax.swing.JTextField DBSchema;
    private javax.swing.JLabel DBSchemaLable;
    private javax.swing.JButton DBTestButton;
    private javax.swing.JTextField DBUrl;
    private javax.swing.JLabel DBUrlLable;
    private javax.swing.JTextField DBUserName;
    private javax.swing.JLabel DBUserNameLable;
    private javax.swing.JLabel DBlable;
    // End of variables declaration//GEN-END:variables
    private String DataFor;
}
