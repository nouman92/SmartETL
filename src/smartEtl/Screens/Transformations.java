/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smartEtl.Screens;

import java.sql.Connection;
import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.table.TableModel;

import smartEtl.operations.DataBaseModule;
import smartEtl.operations.TransformationModule;

/**
 *
 * @author furqan
 */
public class Transformations extends javax.swing.JInternalFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * Creates new form Transformations
	 */
	public Transformations() {
		super("Tables", true, true, true, true);
		ArrayList<String> tables = new ArrayList<String>();
		this.conn = DataBaseModule.getConnection("src");
		if (conn != null) {
			tables = DataBaseModule.getTables(conn);
		}
		String[] tablesList = new String[tables.size()];
		for (int i = 0; i < tables.size(); i++) {
			tablesList[i] = tables.get(i);
		}
		initComponents(tablesList);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	
	// <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents(String[] tablesList) {

        TablesList = new javax.swing.JComboBox<>();
        SelectTableButton = new javax.swing.JButton();
        tableName = new javax.swing.JTextField();
        newNameCheckBox = new javax.swing.JCheckBox();
        tableNameLable = new javax.swing.JLabel();
        dropexistsCheck = new javax.swing.JCheckBox();
        truncateExitsCheck = new javax.swing.JCheckBox();
        skipNullCheck = new javax.swing.JCheckBox();
        seperaterLine = new javax.swing.JSeparator();
        updateExistingCheck = new javax.swing.JCheckBox();
        orderByCheckBox = new javax.swing.JCheckBox();
        sortByTable = new javax.swing.JComboBox<>();
        LoadData = new javax.swing.JButton();
        AttributesScroll = new javax.swing.JScrollPane();
        columnsList = new javax.swing.JTable();
        loadingdataLable = new javax.swing.JLabel();

        TablesList.setModel(new javax.swing.DefaultComboBoxModel<>(tablesList));

        SelectTableButton.setText("Show");
        SelectTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectTableButtonActionPerformed(evt);
            }
        });

        newNameCheckBox.setText("Same As Source");
        newNameCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newNameCheckBoxActionPerformed(evt);
            }
        });

        tableNameLable.setText("Table Name");

        dropexistsCheck.setSelected(true);
        dropexistsCheck.setText("Drop If exists");
        dropexistsCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropexistsCheckActionPerformed(evt);
            }
        });

        truncateExitsCheck.setText("Truncate if exists");
        truncateExitsCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                truncateExitsCheckActionPerformed(evt);
            }
        });

        skipNullCheck.setText("Skip NULL Data");

        updateExistingCheck.setText("Update Existing Data");

        orderByCheckBox.setText("Order By");
        orderByCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderByCheckBoxActionPerformed(evt);
            }
        });

        sortByTable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        sortByTable.setEnabled(false);

        LoadData.setText("Load Data");
        LoadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadDataActionPerformed(evt);
            }
        });

        columnsList.setColumnSelectionAllowed(true);
        columnsList.getTableHeader().setReorderingAllowed(false);
        AttributesScroll.setViewportView(columnsList);
        columnsList.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        loadingdataLable.setText("Loading data ...");
        this.loadingdataLable.setVisible(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AttributesScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dropexistsCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(truncateExitsCheck))
                            .addComponent(seperaterLine)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(orderByCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                                .addComponent(sortByTable, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tableNameLable)
                                    .addComponent(skipNullCheck)
                                    .addComponent(updateExistingCheck)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(LoadData, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(loadingdataLable))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tableName, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(newNameCheckBox)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TablesList, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SelectTableButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TablesList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelectTableButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tableNameLable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tableName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newNameCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dropexistsCheck)
                            .addComponent(truncateExitsCheck))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(seperaterLine, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(skipNullCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateExistingCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(orderByCheckBox)
                            .addComponent(sortByTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LoadData)
                            .addComponent(loadingdataLable)))
                    .addComponent(AttributesScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newNameCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newNameCheckBoxActionPerformed
        if(this.tableName.isEnabled())
            this.tableName.setEnabled(false);
        else
            this.tableName.setEnabled(true);
    }//GEN-LAST:event_newNameCheckBoxActionPerformed

    private void dropexistsCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropexistsCheckActionPerformed
        if(this.dropexistsCheck.isSelected())
        	this.truncateExitsCheck.setSelected(false);
        else if (this.truncateExitsCheck.isSelected()){
        	this.updateExistingCheck.setEnabled(false);
        }else
        	this.updateExistingCheck.setEnabled(true);
        
    }//GEN-LAST:event_dropexistsCheckActionPerformed

    private void orderByCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderByCheckBoxActionPerformed
        if( this.sortByTable.isEnabled())
            this.sortByTable.setEnabled(false);
        else
            this.sortByTable.setEnabled(true);
    }//GEN-LAST:event_orderByCheckBoxActionPerformed

    private void truncateExitsCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_truncateExitsCheckActionPerformed
    	if(this.truncateExitsCheck.isSelected())
    		this.dropexistsCheck.setSelected(false);
		else if (this.dropexistsCheck.isSelected()){
	     	this.updateExistingCheck.setEnabled(false);
	    }else
	    	this.updateExistingCheck.setEnabled(true);
    }//GEN-LAST:event_truncateExitsCheckActionPerformed

    private void LoadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadDataActionPerformed
    	String[] columns ;
    	String destTable = this.tableName.getText();
    	String sortBy = this.sortByTable.getItemAt(this.sortByTable.getSelectedIndex());
    	boolean chnageName = this.newNameCheckBox.isSelected();
    	boolean truncate = this.truncateExitsCheck.isSelected();
        boolean dropTable = this.dropexistsCheck.isSelected();
        boolean skipNull = this.skipNullCheck.isSelected();
        boolean updateTable = this.updateExistingCheck.isSelected();
        boolean orderBy = this.orderByCheckBox.isSelected();
        if(destTable.equals("") && !chnageName )
    	{
    		JOptionPane.showMessageDialog(this, "Please Enter Table Name");
    		return;
    	}
        int count = columnsList.getRowCount();
        columns = new String[count];
		if( count > 0 && this.selectedSrcTable != null){
			
			TableModel model = columnsList.getModel();
			int attributes = 0;
			for(int i = 0 ; i < count ; i++){
				Boolean checked = (Boolean) model.getValueAt(i, 1);
				String tableName = (String) model.getValueAt(i, 0);
				if(checked){
					columns[i] = tableName;
					attributes ++;
				}
				else
					columns[i] = "ignore-this";
			}
			if( attributes == 0 )
			{
				JOptionPane.showMessageDialog(this, "Please Atleast 1 Column to load");
				return;
			}
			if(DataBaseModule.checkIfBothDbAreSame()){
	    		JOptionPane.showMessageDialog(this, "Error !Both Source and Destination DB Are Same!");
	    		return;
	    	}
			TransformationModule transformation = new TransformationModule(selectedSrcTable, columns, destTable, sortBy, chnageName, truncate, dropTable, skipNull, updateTable, orderBy , attributes);
			if(transformation.init()){
				if(transformation.CreateTable()){
					transformation.start(this);
				}
				else
					JOptionPane.showMessageDialog(this, "Could Not Create Table");	
			}
			else
				JOptionPane.showMessageDialog(this, "Connections Problem");
			
		}
		
    }//GEN-LAST:event_LoadDataActionPerformed

	@SuppressWarnings("serial")
	private void SelectTableButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_SelectTableButtonActionPerformed
		Object table = TablesList.getSelectedItem();
		if(table == null)
			return;
		this.selectedSrcTable = table.toString();
		ArrayList<String> attributes = DataBaseModule.getTableAttributes(this.conn, this.selectedSrcTable);
		Object[][] obj = new Object[attributes.size()][2];
		String[] tablesList = new String[attributes.size()];
		int i = 0;
		for (String s : attributes) {
			obj[i][0] = s;
			tablesList[i] = s;
			obj[i++][1] = Boolean.TRUE;
		}
		columnsList.setModel(new javax.swing.table.DefaultTableModel(obj, new String[] { "Column", "Select" }) {
			@SuppressWarnings("rawtypes")
			Class[] types = new Class[] { java.lang.String.class, java.lang.Boolean.class };
			boolean[] canEdit = new boolean[] { false, true };

			@SuppressWarnings({ "unchecked", "rawtypes" })
			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		sortByTable.setModel(new javax.swing.DefaultComboBoxModel<>(tablesList));
	}// GEN-LAST:event_SelectTableButtonActionPerformed
	public void toggleLoadButton(){
		if( this.LoadData.isEnabled()){
			this.LoadData.setEnabled(false);
			this.loadingdataLable.setVisible(true);
		}
		else{
			this.LoadData.setEnabled(true);
			this.loadingdataLable.setVisible(false);
		}
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane AttributesScroll;
    private javax.swing.JButton LoadData;
    private javax.swing.JButton SelectTableButton;
    private javax.swing.JComboBox<String> TablesList;
    private javax.swing.JTable columnsList;
    private javax.swing.JCheckBox dropexistsCheck;
    private javax.swing.JLabel loadingdataLable;
    private javax.swing.JCheckBox newNameCheckBox;
    private javax.swing.JCheckBox orderByCheckBox;
    private javax.swing.JSeparator seperaterLine;
    private javax.swing.JCheckBox skipNullCheck;
    private javax.swing.JComboBox<String> sortByTable;
    private javax.swing.JTextField tableName;
    private javax.swing.JLabel tableNameLable;
    private javax.swing.JCheckBox truncateExitsCheck;
    private javax.swing.JCheckBox updateExistingCheck;
    // End of variables declaration//GEN-END:variables
	private Connection conn;
	private String selectedSrcTable;
}
